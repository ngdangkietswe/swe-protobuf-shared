// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: timetracking/time_tracking_service.proto

package timetracking

import (
	common "github.com/ngdangkietswe/swe-protobuf-shared/generated/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckInReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          *string                `protobuf:"bytes,1,opt,name=date,proto3,oneof" json:"date,omitempty"` // YYYY-MM-DD, default to today
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckInReq) Reset() {
	*x = CheckInReq{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInReq) ProtoMessage() {}

func (x *CheckInReq) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInReq.ProtoReflect.Descriptor instead.
func (*CheckInReq) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{0}
}

func (x *CheckInReq) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

type CheckOutReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          *string                `protobuf:"bytes,1,opt,name=date,proto3,oneof" json:"date,omitempty"` // YYYY-MM-DD, default to today
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckOutReq) Reset() {
	*x = CheckOutReq{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckOutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOutReq) ProtoMessage() {}

func (x *CheckOutReq) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOutReq.ProtoReflect.Descriptor instead.
func (*CheckOutReq) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{1}
}

func (x *CheckOutReq) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

type CheckInOutResp struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Resp:
	//
	//	*CheckInOutResp_Data_
	//	*CheckInOutResp_Error
	Resp          isCheckInOutResp_Resp `protobuf_oneof:"resp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckInOutResp) Reset() {
	*x = CheckInOutResp{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckInOutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInOutResp) ProtoMessage() {}

func (x *CheckInOutResp) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInOutResp.ProtoReflect.Descriptor instead.
func (*CheckInOutResp) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{2}
}

func (x *CheckInOutResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CheckInOutResp) GetResp() isCheckInOutResp_Resp {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *CheckInOutResp) GetData() *CheckInOutResp_Data {
	if x != nil {
		if x, ok := x.Resp.(*CheckInOutResp_Data_); ok {
			return x.Data
		}
	}
	return nil
}

func (x *CheckInOutResp) GetError() *common.Error {
	if x != nil {
		if x, ok := x.Resp.(*CheckInOutResp_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isCheckInOutResp_Resp interface {
	isCheckInOutResp_Resp()
}

type CheckInOutResp_Data_ struct {
	Data *CheckInOutResp_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type CheckInOutResp_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*CheckInOutResp_Data_) isCheckInOutResp_Resp() {}

func (*CheckInOutResp_Error) isCheckInOutResp_Resp() {}

type GetTimeTrackingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"` // default to current user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimeTrackingReq) Reset() {
	*x = GetTimeTrackingReq{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeTrackingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeTrackingReq) ProtoMessage() {}

func (x *GetTimeTrackingReq) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeTrackingReq.ProtoReflect.Descriptor instead.
func (*GetTimeTrackingReq) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTimeTrackingReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTimeTrackingReq) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type GetTimeTrackingResp struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Resp:
	//
	//	*GetTimeTrackingResp_TimeTracking
	//	*GetTimeTrackingResp_Error
	Resp          isGetTimeTrackingResp_Resp `protobuf_oneof:"resp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimeTrackingResp) Reset() {
	*x = GetTimeTrackingResp{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeTrackingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeTrackingResp) ProtoMessage() {}

func (x *GetTimeTrackingResp) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeTrackingResp.ProtoReflect.Descriptor instead.
func (*GetTimeTrackingResp) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetTimeTrackingResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTimeTrackingResp) GetResp() isGetTimeTrackingResp_Resp {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *GetTimeTrackingResp) GetTimeTracking() *TimeTracking {
	if x != nil {
		if x, ok := x.Resp.(*GetTimeTrackingResp_TimeTracking); ok {
			return x.TimeTracking
		}
	}
	return nil
}

func (x *GetTimeTrackingResp) GetError() *common.Error {
	if x != nil {
		if x, ok := x.Resp.(*GetTimeTrackingResp_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isGetTimeTrackingResp_Resp interface {
	isGetTimeTrackingResp_Resp()
}

type GetTimeTrackingResp_TimeTracking struct {
	TimeTracking *TimeTracking `protobuf:"bytes,2,opt,name=time_tracking,json=timeTracking,proto3,oneof"`
}

type GetTimeTrackingResp_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*GetTimeTrackingResp_TimeTracking) isGetTimeTrackingResp_Resp() {}

func (*GetTimeTrackingResp_Error) isGetTimeTrackingResp_Resp() {}

type GetListTimeTrackingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`                         // default to current user
	StartDate     string                 `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`                      // YYYY-MM-DD
	EndDate       string                 `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`                            // YYYY-MM-DD
	Status        *TimeTrackingStatus    `protobuf:"varint,4,opt,name=status,proto3,enum=timetracking.TimeTrackingStatus,oneof" json:"status,omitempty"` // default to STATUS_UNSPECIFIED
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetListTimeTrackingReq) Reset() {
	*x = GetListTimeTrackingReq{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListTimeTrackingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListTimeTrackingReq) ProtoMessage() {}

func (x *GetListTimeTrackingReq) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListTimeTrackingReq.ProtoReflect.Descriptor instead.
func (*GetListTimeTrackingReq) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetListTimeTrackingReq) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GetListTimeTrackingReq) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetListTimeTrackingReq) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetListTimeTrackingReq) GetStatus() TimeTrackingStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TimeTrackingStatus_STATUS_UNSPECIFIED
}

type GetListTimeTrackingResp struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Resp:
	//
	//	*GetListTimeTrackingResp_Data_
	//	*GetListTimeTrackingResp_Error
	Resp          isGetListTimeTrackingResp_Resp `protobuf_oneof:"resp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetListTimeTrackingResp) Reset() {
	*x = GetListTimeTrackingResp{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListTimeTrackingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListTimeTrackingResp) ProtoMessage() {}

func (x *GetListTimeTrackingResp) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListTimeTrackingResp.ProtoReflect.Descriptor instead.
func (*GetListTimeTrackingResp) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetListTimeTrackingResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetListTimeTrackingResp) GetResp() isGetListTimeTrackingResp_Resp {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *GetListTimeTrackingResp) GetData() *GetListTimeTrackingResp_Data {
	if x != nil {
		if x, ok := x.Resp.(*GetListTimeTrackingResp_Data_); ok {
			return x.Data
		}
	}
	return nil
}

func (x *GetListTimeTrackingResp) GetError() *common.Error {
	if x != nil {
		if x, ok := x.Resp.(*GetListTimeTrackingResp_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isGetListTimeTrackingResp_Resp interface {
	isGetListTimeTrackingResp_Resp()
}

type GetListTimeTrackingResp_Data_ struct {
	Data *GetListTimeTrackingResp_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type GetListTimeTrackingResp_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*GetListTimeTrackingResp_Data_) isGetListTimeTrackingResp_Resp() {}

func (*GetListTimeTrackingResp_Error) isGetListTimeTrackingResp_Resp() {}

type OverTimeReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         *string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"` // default to current user
	TimeTrackingId string                 `protobuf:"bytes,2,opt,name=time_tracking_id,json=timeTrackingId,proto3" json:"time_tracking_id,omitempty"`
	OvertimeHours  float64                `protobuf:"fixed64,3,opt,name=overtime_hours,json=overtimeHours,proto3" json:"overtime_hours,omitempty"`
	Reason         string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	ApproverId     string                 `protobuf:"bytes,5,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"` // use for send notification to approver
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OverTimeReq) Reset() {
	*x = OverTimeReq{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverTimeReq) ProtoMessage() {}

func (x *OverTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverTimeReq.ProtoReflect.Descriptor instead.
func (*OverTimeReq) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{7}
}

func (x *OverTimeReq) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *OverTimeReq) GetTimeTrackingId() string {
	if x != nil {
		return x.TimeTrackingId
	}
	return ""
}

func (x *OverTimeReq) GetOvertimeHours() float64 {
	if x != nil {
		return x.OvertimeHours
	}
	return 0
}

func (x *OverTimeReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *OverTimeReq) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

type ApproveOvertimeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // overtime id
	IsApproved    bool                   `protobuf:"varint,2,opt,name=is_approved,json=isApproved,proto3" json:"is_approved,omitempty"`
	Reason        *string                `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveOvertimeReq) Reset() {
	*x = ApproveOvertimeReq{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveOvertimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveOvertimeReq) ProtoMessage() {}

func (x *ApproveOvertimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveOvertimeReq.ProtoReflect.Descriptor instead.
func (*ApproveOvertimeReq) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{8}
}

func (x *ApproveOvertimeReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApproveOvertimeReq) GetIsApproved() bool {
	if x != nil {
		return x.IsApproved
	}
	return false
}

func (x *ApproveOvertimeReq) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type CheckInOutResp_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Date          string                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`                                       // YYYY-MM-DD
	CheckInTime   string                 `protobuf:"bytes,3,opt,name=check_in_time,json=checkInTime,proto3" json:"check_in_time,omitempty"`    // HH:mm:ss
	CheckOutTime  string                 `protobuf:"bytes,4,opt,name=check_out_time,json=checkOutTime,proto3" json:"check_out_time,omitempty"` // HH:mm:ss
	Status        TimeTrackingStatus     `protobuf:"varint,5,opt,name=status,proto3,enum=timetracking.TimeTrackingStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckInOutResp_Data) Reset() {
	*x = CheckInOutResp_Data{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckInOutResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInOutResp_Data) ProtoMessage() {}

func (x *CheckInOutResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInOutResp_Data.ProtoReflect.Descriptor instead.
func (*CheckInOutResp_Data) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CheckInOutResp_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CheckInOutResp_Data) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CheckInOutResp_Data) GetCheckInTime() string {
	if x != nil {
		return x.CheckInTime
	}
	return ""
}

func (x *CheckInOutResp_Data) GetCheckOutTime() string {
	if x != nil {
		return x.CheckOutTime
	}
	return ""
}

func (x *CheckInOutResp_Data) GetStatus() TimeTrackingStatus {
	if x != nil {
		return x.Status
	}
	return TimeTrackingStatus_STATUS_UNSPECIFIED
}

type GetListTimeTrackingResp_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeTrackings []*TimeTracking        `protobuf:"bytes,1,rep,name=time_trackings,json=timeTrackings,proto3" json:"time_trackings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetListTimeTrackingResp_Data) Reset() {
	*x = GetListTimeTrackingResp_Data{}
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListTimeTrackingResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListTimeTrackingResp_Data) ProtoMessage() {}

func (x *GetListTimeTrackingResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_timetracking_time_tracking_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListTimeTrackingResp_Data.ProtoReflect.Descriptor instead.
func (*GetListTimeTrackingResp_Data) Descriptor() ([]byte, []int) {
	return file_timetracking_time_tracking_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetListTimeTrackingResp_Data) GetTimeTrackings() []*TimeTracking {
	if x != nil {
		return x.TimeTrackings
	}
	return nil
}

var File_timetracking_time_tracking_service_proto protoreflect.FileDescriptor

var file_timetracking_time_tracking_service_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x74, 0x69, 0x6d,
	0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x2f, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x1a, 0xae, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xa1, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x49, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0xc1, 0x01, 0x0a,
	0x0b, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x22, 0x6d, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32,
	0xe0, 0x05, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x12, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x2d, 0x69, 0x6e, 0x12, 0x70, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x12, 0x19, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2d, 0x6f, 0x75, 0x74, 0x12, 0x7b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x65, 0x0a, 0x08, 0x4f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a,
	0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x7f, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x42, 0xc1, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x67, 0x64, 0x61, 0x6e, 0x67, 0x6b, 0x69, 0x65, 0x74, 0x73, 0x77, 0x65, 0x2f, 0x73, 0x77,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02,
	0x0c, 0x54, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x0c,
	0x54, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0xe2, 0x02, 0x18, 0x54,
	0x69, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_timetracking_time_tracking_service_proto_rawDescOnce sync.Once
	file_timetracking_time_tracking_service_proto_rawDescData []byte
)

func file_timetracking_time_tracking_service_proto_rawDescGZIP() []byte {
	file_timetracking_time_tracking_service_proto_rawDescOnce.Do(func() {
		file_timetracking_time_tracking_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_timetracking_time_tracking_service_proto_rawDesc), len(file_timetracking_time_tracking_service_proto_rawDesc)))
	})
	return file_timetracking_time_tracking_service_proto_rawDescData
}

var file_timetracking_time_tracking_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_timetracking_time_tracking_service_proto_goTypes = []any{
	(*CheckInReq)(nil),                   // 0: timetracking.CheckInReq
	(*CheckOutReq)(nil),                  // 1: timetracking.CheckOutReq
	(*CheckInOutResp)(nil),               // 2: timetracking.CheckInOutResp
	(*GetTimeTrackingReq)(nil),           // 3: timetracking.GetTimeTrackingReq
	(*GetTimeTrackingResp)(nil),          // 4: timetracking.GetTimeTrackingResp
	(*GetListTimeTrackingReq)(nil),       // 5: timetracking.GetListTimeTrackingReq
	(*GetListTimeTrackingResp)(nil),      // 6: timetracking.GetListTimeTrackingResp
	(*OverTimeReq)(nil),                  // 7: timetracking.OverTimeReq
	(*ApproveOvertimeReq)(nil),           // 8: timetracking.ApproveOvertimeReq
	(*CheckInOutResp_Data)(nil),          // 9: timetracking.CheckInOutResp.Data
	(*GetListTimeTrackingResp_Data)(nil), // 10: timetracking.GetListTimeTrackingResp.Data
	(*common.Error)(nil),                 // 11: common.Error
	(*TimeTracking)(nil),                 // 12: timetracking.TimeTracking
	(TimeTrackingStatus)(0),              // 13: timetracking.TimeTrackingStatus
	(*common.UpsertResp)(nil),            // 14: common.UpsertResp
	(*common.EmptyResp)(nil),             // 15: common.EmptyResp
}
var file_timetracking_time_tracking_service_proto_depIdxs = []int32{
	9,  // 0: timetracking.CheckInOutResp.data:type_name -> timetracking.CheckInOutResp.Data
	11, // 1: timetracking.CheckInOutResp.error:type_name -> common.Error
	12, // 2: timetracking.GetTimeTrackingResp.time_tracking:type_name -> timetracking.TimeTracking
	11, // 3: timetracking.GetTimeTrackingResp.error:type_name -> common.Error
	13, // 4: timetracking.GetListTimeTrackingReq.status:type_name -> timetracking.TimeTrackingStatus
	10, // 5: timetracking.GetListTimeTrackingResp.data:type_name -> timetracking.GetListTimeTrackingResp.Data
	11, // 6: timetracking.GetListTimeTrackingResp.error:type_name -> common.Error
	13, // 7: timetracking.CheckInOutResp.Data.status:type_name -> timetracking.TimeTrackingStatus
	12, // 8: timetracking.GetListTimeTrackingResp.Data.time_trackings:type_name -> timetracking.TimeTracking
	0,  // 9: timetracking.TimeTrackingService.CheckIn:input_type -> timetracking.CheckInReq
	1,  // 10: timetracking.TimeTrackingService.CheckOut:input_type -> timetracking.CheckOutReq
	3,  // 11: timetracking.TimeTrackingService.GetTimeTracking:input_type -> timetracking.GetTimeTrackingReq
	5,  // 12: timetracking.TimeTrackingService.GetListTimeTracking:input_type -> timetracking.GetListTimeTrackingReq
	7,  // 13: timetracking.TimeTrackingService.Overtime:input_type -> timetracking.OverTimeReq
	8,  // 14: timetracking.TimeTrackingService.ApproveOvertime:input_type -> timetracking.ApproveOvertimeReq
	2,  // 15: timetracking.TimeTrackingService.CheckIn:output_type -> timetracking.CheckInOutResp
	2,  // 16: timetracking.TimeTrackingService.CheckOut:output_type -> timetracking.CheckInOutResp
	4,  // 17: timetracking.TimeTrackingService.GetTimeTracking:output_type -> timetracking.GetTimeTrackingResp
	6,  // 18: timetracking.TimeTrackingService.GetListTimeTracking:output_type -> timetracking.GetListTimeTrackingResp
	14, // 19: timetracking.TimeTrackingService.Overtime:output_type -> common.UpsertResp
	15, // 20: timetracking.TimeTrackingService.ApproveOvertime:output_type -> common.EmptyResp
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_timetracking_time_tracking_service_proto_init() }
func file_timetracking_time_tracking_service_proto_init() {
	if File_timetracking_time_tracking_service_proto != nil {
		return
	}
	file_timetracking_shared_proto_init()
	file_timetracking_time_tracking_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_timetracking_time_tracking_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_timetracking_time_tracking_service_proto_msgTypes[2].OneofWrappers = []any{
		(*CheckInOutResp_Data_)(nil),
		(*CheckInOutResp_Error)(nil),
	}
	file_timetracking_time_tracking_service_proto_msgTypes[3].OneofWrappers = []any{}
	file_timetracking_time_tracking_service_proto_msgTypes[4].OneofWrappers = []any{
		(*GetTimeTrackingResp_TimeTracking)(nil),
		(*GetTimeTrackingResp_Error)(nil),
	}
	file_timetracking_time_tracking_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_timetracking_time_tracking_service_proto_msgTypes[6].OneofWrappers = []any{
		(*GetListTimeTrackingResp_Data_)(nil),
		(*GetListTimeTrackingResp_Error)(nil),
	}
	file_timetracking_time_tracking_service_proto_msgTypes[7].OneofWrappers = []any{}
	file_timetracking_time_tracking_service_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_timetracking_time_tracking_service_proto_rawDesc), len(file_timetracking_time_tracking_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_timetracking_time_tracking_service_proto_goTypes,
		DependencyIndexes: file_timetracking_time_tracking_service_proto_depIdxs,
		MessageInfos:      file_timetracking_time_tracking_service_proto_msgTypes,
	}.Build()
	File_timetracking_time_tracking_service_proto = out.File
	file_timetracking_time_tracking_service_proto_goTypes = nil
	file_timetracking_time_tracking_service_proto_depIdxs = nil
}
