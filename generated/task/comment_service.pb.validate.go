// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: task/comment_service.proto

package task

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpsertCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpsertCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertCommentReqMultiError, or nil if none found.
func (m *UpsertCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for TaskId

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if len(errors) > 0 {
		return UpsertCommentReqMultiError(errors)
	}

	return nil
}

// UpsertCommentReqMultiError is an error wrapping multiple validation errors
// returned by UpsertCommentReq.ValidateAll() if the designated constraints
// aren't met.
type UpsertCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertCommentReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertCommentReqMultiError) AllErrors() []error { return m }

// UpsertCommentReqValidationError is the validation error returned by
// UpsertCommentReq.Validate if the designated constraints aren't met.
type UpsertCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertCommentReqValidationError) ErrorName() string { return "UpsertCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e UpsertCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertCommentReqValidationError{}

// Validate checks the field values on ListCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListCommentReqMultiError,
// or nil if none found.
func (m *ListCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if all {
		switch v := interface{}(m.GetPageable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommentReqValidationError{
					field:  "Pageable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommentReqValidationError{
					field:  "Pageable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommentReqValidationError{
				field:  "Pageable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCommentReqMultiError(errors)
	}

	return nil
}

// ListCommentReqMultiError is an error wrapping multiple validation errors
// returned by ListCommentReq.ValidateAll() if the designated constraints
// aren't met.
type ListCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentReqMultiError) AllErrors() []error { return m }

// ListCommentReqValidationError is the validation error returned by
// ListCommentReq.Validate if the designated constraints aren't met.
type ListCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReqValidationError) ErrorName() string { return "ListCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e ListCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReqValidationError{}

// Validate checks the field values on ListCommentResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCommentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentRespMultiError, or nil if none found.
func (m *ListCommentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	switch v := m.Resp.(type) {
	case *ListCommentResp_Data_:
		if v == nil {
			err := ListCommentRespValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentRespValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentRespValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListCommentResp_Error:
		if v == nil {
			err := ListCommentRespValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentRespValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentRespValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentRespValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListCommentRespMultiError(errors)
	}

	return nil
}

// ListCommentRespMultiError is an error wrapping multiple validation errors
// returned by ListCommentResp.ValidateAll() if the designated constraints
// aren't met.
type ListCommentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentRespMultiError) AllErrors() []error { return m }

// ListCommentRespValidationError is the validation error returned by
// ListCommentResp.Validate if the designated constraints aren't met.
type ListCommentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentRespValidationError) ErrorName() string { return "ListCommentRespValidationError" }

// Error satisfies the builtin error interface
func (e ListCommentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentRespValidationError{}

// Validate checks the field values on ListCommentResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentResp_DataMultiError, or nil if none found.
func (m *ListCommentResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentResp_DataValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentResp_DataValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentResp_DataValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPageMetaData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommentResp_DataValidationError{
					field:  "PageMetaData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommentResp_DataValidationError{
					field:  "PageMetaData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageMetaData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommentResp_DataValidationError{
				field:  "PageMetaData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCommentResp_DataMultiError(errors)
	}

	return nil
}

// ListCommentResp_DataMultiError is an error wrapping multiple validation
// errors returned by ListCommentResp_Data.ValidateAll() if the designated
// constraints aren't met.
type ListCommentResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentResp_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentResp_DataMultiError) AllErrors() []error { return m }

// ListCommentResp_DataValidationError is the validation error returned by
// ListCommentResp_Data.Validate if the designated constraints aren't met.
type ListCommentResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentResp_DataValidationError) ErrorName() string {
	return "ListCommentResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentResp_DataValidationError{}
