// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: task/comment_service.proto

package task

import (
	common "github.com/ngdangkietswe/swe-protobuf-shared/generated/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpsertCommentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	TaskId        string                 `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ParentId      *string                `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertCommentReq) Reset() {
	*x = UpsertCommentReq{}
	mi := &file_task_comment_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCommentReq) ProtoMessage() {}

func (x *UpsertCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_comment_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCommentReq.ProtoReflect.Descriptor instead.
func (*UpsertCommentReq) Descriptor() ([]byte, []int) {
	return file_task_comment_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertCommentReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpsertCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpsertCommentReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UpsertCommentReq) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

type ListCommentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Pageable      *common.Pageable       `protobuf:"bytes,2,opt,name=pageable,proto3" json:"pageable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommentReq) Reset() {
	*x = ListCommentReq{}
	mi := &file_task_comment_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentReq) ProtoMessage() {}

func (x *ListCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_comment_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentReq.ProtoReflect.Descriptor instead.
func (*ListCommentReq) Descriptor() ([]byte, []int) {
	return file_task_comment_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListCommentReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListCommentReq) GetPageable() *common.Pageable {
	if x != nil {
		return x.Pageable
	}
	return nil
}

type ListCommentResp struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Resp:
	//
	//	*ListCommentResp_Data_
	//	*ListCommentResp_Error
	Resp          isListCommentResp_Resp `protobuf_oneof:"resp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommentResp) Reset() {
	*x = ListCommentResp{}
	mi := &file_task_comment_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentResp) ProtoMessage() {}

func (x *ListCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_comment_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentResp.ProtoReflect.Descriptor instead.
func (*ListCommentResp) Descriptor() ([]byte, []int) {
	return file_task_comment_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListCommentResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListCommentResp) GetResp() isListCommentResp_Resp {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *ListCommentResp) GetData() *ListCommentResp_Data {
	if x != nil {
		if x, ok := x.Resp.(*ListCommentResp_Data_); ok {
			return x.Data
		}
	}
	return nil
}

func (x *ListCommentResp) GetError() *common.Error {
	if x != nil {
		if x, ok := x.Resp.(*ListCommentResp_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isListCommentResp_Resp interface {
	isListCommentResp_Resp()
}

type ListCommentResp_Data_ struct {
	Data *ListCommentResp_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type ListCommentResp_Error struct {
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ListCommentResp_Data_) isListCommentResp_Resp() {}

func (*ListCommentResp_Error) isListCommentResp_Resp() {}

type ListCommentResp_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comments      []*Comment             `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	PageMetaData  *common.PageMetaData   `protobuf:"bytes,2,opt,name=page_meta_data,json=pageMetaData,proto3" json:"page_meta_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommentResp_Data) Reset() {
	*x = ListCommentResp_Data{}
	mi := &file_task_comment_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommentResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentResp_Data) ProtoMessage() {}

func (x *ListCommentResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_task_comment_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentResp_Data.ProtoReflect.Descriptor instead.
func (*ListCommentResp_Data) Descriptor() ([]byte, []int) {
	return file_task_comment_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListCommentResp_Data) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ListCommentResp_Data) GetPageMetaData() *common.PageMetaData {
	if x != nil {
		return x.PageMetaData
	}
	return nil
}

var File_task_comment_service_proto protoreflect.FileDescriptor

const file_task_comment_service_proto_rawDesc = "" +
	"\n" +
	"\x1atask/comment_service.proto\x12\x04task\x1a\x1cgoogle/api/annotations.proto\x1a\x13common/shared.proto\x1a\x11task/shared.proto\"\x91\x01\n" +
	"\x10UpsertCommentReq\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12\x17\n" +
	"\atask_id\x18\x03 \x01(\tR\x06taskId\x12 \n" +
	"\tparent_id\x18\x04 \x01(\tH\x01R\bparentId\x88\x01\x01B\x05\n" +
	"\x03_idB\f\n" +
	"\n" +
	"_parent_id\"W\n" +
	"\x0eListCommentReq\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12,\n" +
	"\bpageable\x18\x02 \x01(\v2\x10.common.PageableR\bpageable\"\xfb\x01\n" +
	"\x0fListCommentResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x120\n" +
	"\x04data\x18\x02 \x01(\v2\x1a.task.ListCommentResp.DataH\x00R\x04data\x12%\n" +
	"\x05error\x18\x03 \x01(\v2\r.common.ErrorH\x00R\x05error\x1am\n" +
	"\x04Data\x12)\n" +
	"\bcomments\x18\x01 \x03(\v2\r.task.CommentR\bcomments\x12:\n" +
	"\x0epage_meta_data\x18\x02 \x01(\v2\x14.common.PageMetaDataR\fpageMetaDataB\x06\n" +
	"\x04resp2\x92\x02\n" +
	"\x0eCommentService\x12X\n" +
	"\rUpsertComment\x12\x16.task.UpsertCommentReq\x1a\x12.common.UpsertResp\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/api/v1/comments\x12T\n" +
	"\vListComment\x12\x14.task.ListCommentReq\x1a\x15.task.ListCommentResp\"\x18\x82\xd3\xe4\x93\x02\x12\x12\x10/api/v1/comments\x12P\n" +
	"\rDeleteComment\x12\r.common.IdReq\x1a\x11.common.EmptyResp\"\x1d\x82\xd3\xe4\x93\x02\x17*\x15/api/v1/comments/{id}B\x8c\x01\n" +
	"\bcom.taskB\x13CommentServiceProtoP\x01Z;github.com/ngdangkietswe/swe-protobuf-shared/generated/task\xa2\x02\x03TXX\xaa\x02\x04Task\xca\x02\x04Task\xe2\x02\x10Task\\GPBMetadata\xea\x02\x04Taskb\x06proto3"

var (
	file_task_comment_service_proto_rawDescOnce sync.Once
	file_task_comment_service_proto_rawDescData []byte
)

func file_task_comment_service_proto_rawDescGZIP() []byte {
	file_task_comment_service_proto_rawDescOnce.Do(func() {
		file_task_comment_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_task_comment_service_proto_rawDesc), len(file_task_comment_service_proto_rawDesc)))
	})
	return file_task_comment_service_proto_rawDescData
}

var file_task_comment_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_task_comment_service_proto_goTypes = []any{
	(*UpsertCommentReq)(nil),     // 0: task.UpsertCommentReq
	(*ListCommentReq)(nil),       // 1: task.ListCommentReq
	(*ListCommentResp)(nil),      // 2: task.ListCommentResp
	(*ListCommentResp_Data)(nil), // 3: task.ListCommentResp.Data
	(*common.Pageable)(nil),      // 4: common.Pageable
	(*common.Error)(nil),         // 5: common.Error
	(*Comment)(nil),              // 6: task.Comment
	(*common.PageMetaData)(nil),  // 7: common.PageMetaData
	(*common.IdReq)(nil),         // 8: common.IdReq
	(*common.UpsertResp)(nil),    // 9: common.UpsertResp
	(*common.EmptyResp)(nil),     // 10: common.EmptyResp
}
var file_task_comment_service_proto_depIdxs = []int32{
	4,  // 0: task.ListCommentReq.pageable:type_name -> common.Pageable
	3,  // 1: task.ListCommentResp.data:type_name -> task.ListCommentResp.Data
	5,  // 2: task.ListCommentResp.error:type_name -> common.Error
	6,  // 3: task.ListCommentResp.Data.comments:type_name -> task.Comment
	7,  // 4: task.ListCommentResp.Data.page_meta_data:type_name -> common.PageMetaData
	0,  // 5: task.CommentService.UpsertComment:input_type -> task.UpsertCommentReq
	1,  // 6: task.CommentService.ListComment:input_type -> task.ListCommentReq
	8,  // 7: task.CommentService.DeleteComment:input_type -> common.IdReq
	9,  // 8: task.CommentService.UpsertComment:output_type -> common.UpsertResp
	2,  // 9: task.CommentService.ListComment:output_type -> task.ListCommentResp
	10, // 10: task.CommentService.DeleteComment:output_type -> common.EmptyResp
	8,  // [8:11] is the sub-list for method output_type
	5,  // [5:8] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_task_comment_service_proto_init() }
func file_task_comment_service_proto_init() {
	if File_task_comment_service_proto != nil {
		return
	}
	file_task_shared_proto_init()
	file_task_comment_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_task_comment_service_proto_msgTypes[2].OneofWrappers = []any{
		(*ListCommentResp_Data_)(nil),
		(*ListCommentResp_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_task_comment_service_proto_rawDesc), len(file_task_comment_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_comment_service_proto_goTypes,
		DependencyIndexes: file_task_comment_service_proto_depIdxs,
		MessageInfos:      file_task_comment_service_proto_msgTypes,
	}.Build()
	File_task_comment_service_proto = out.File
	file_task_comment_service_proto_goTypes = nil
	file_task_comment_service_proto_depIdxs = nil
}
