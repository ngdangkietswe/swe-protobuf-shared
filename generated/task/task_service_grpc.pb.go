// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: task/task_service.proto

package task

import (
	context "context"
	common "github.com/ngdangkietswe/swe-protobuf-shared/generated/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskService_UpsertTask_FullMethodName           = "/task.TaskService/UpsertTask"
	TaskService_ListTask_FullMethodName             = "/task.TaskService/ListTask"
	TaskService_GetTask_FullMethodName              = "/task.TaskService/GetTask"
	TaskService_DeleteTask_FullMethodName           = "/task.TaskService/DeleteTask"
	TaskService_MarkTaskAsInProgress_FullMethodName = "/task.TaskService/MarkTaskAsInProgress"
	TaskService_MarkTaskAsInReview_FullMethodName   = "/task.TaskService/MarkTaskAsInReview"
	TaskService_MarkTaskAsDone_FullMethodName       = "/task.TaskService/MarkTaskAsDone"
	TaskService_MarkTaskAsCanceled_FullMethodName   = "/task.TaskService/MarkTaskAsCanceled"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	UpsertTask(ctx context.Context, in *UpsertTaskReq, opts ...grpc.CallOption) (*common.UpsertResp, error)
	ListTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskResp, error)
	GetTask(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*GetTaskResp, error)
	DeleteTask(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error)
	MarkTaskAsInProgress(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error)
	MarkTaskAsInReview(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error)
	MarkTaskAsDone(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error)
	MarkTaskAsCanceled(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) UpsertTask(ctx context.Context, in *UpsertTaskReq, opts ...grpc.CallOption) (*common.UpsertResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.UpsertResp)
	err := c.cc.Invoke(ctx, TaskService_UpsertTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTaskResp)
	err := c.cc.Invoke(ctx, TaskService_ListTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*GetTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskResp)
	err := c.cc.Invoke(ctx, TaskService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.EmptyResp)
	err := c.cc.Invoke(ctx, TaskService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MarkTaskAsInProgress(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.EmptyResp)
	err := c.cc.Invoke(ctx, TaskService_MarkTaskAsInProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MarkTaskAsInReview(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.EmptyResp)
	err := c.cc.Invoke(ctx, TaskService_MarkTaskAsInReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MarkTaskAsDone(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.EmptyResp)
	err := c.cc.Invoke(ctx, TaskService_MarkTaskAsDone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MarkTaskAsCanceled(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.EmptyResp)
	err := c.cc.Invoke(ctx, TaskService_MarkTaskAsCanceled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
type TaskServiceServer interface {
	UpsertTask(context.Context, *UpsertTaskReq) (*common.UpsertResp, error)
	ListTask(context.Context, *ListTaskReq) (*ListTaskResp, error)
	GetTask(context.Context, *common.IdReq) (*GetTaskResp, error)
	DeleteTask(context.Context, *common.IdReq) (*common.EmptyResp, error)
	MarkTaskAsInProgress(context.Context, *common.IdReq) (*common.EmptyResp, error)
	MarkTaskAsInReview(context.Context, *common.IdReq) (*common.EmptyResp, error)
	MarkTaskAsDone(context.Context, *common.IdReq) (*common.EmptyResp, error)
	MarkTaskAsCanceled(context.Context, *common.IdReq) (*common.EmptyResp, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) UpsertTask(context.Context, *UpsertTaskReq) (*common.UpsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTask not implemented")
}
func (UnimplementedTaskServiceServer) ListTask(context.Context, *ListTaskReq) (*ListTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTask(context.Context, *common.IdReq) (*GetTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) DeleteTask(context.Context, *common.IdReq) (*common.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServiceServer) MarkTaskAsInProgress(context.Context, *common.IdReq) (*common.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTaskAsInProgress not implemented")
}
func (UnimplementedTaskServiceServer) MarkTaskAsInReview(context.Context, *common.IdReq) (*common.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTaskAsInReview not implemented")
}
func (UnimplementedTaskServiceServer) MarkTaskAsDone(context.Context, *common.IdReq) (*common.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTaskAsDone not implemented")
}
func (UnimplementedTaskServiceServer) MarkTaskAsCanceled(context.Context, *common.IdReq) (*common.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTaskAsCanceled not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_UpsertTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpsertTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpsertTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpsertTask(ctx, req.(*UpsertTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ListTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTask(ctx, req.(*ListTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MarkTaskAsInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MarkTaskAsInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_MarkTaskAsInProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MarkTaskAsInProgress(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MarkTaskAsInReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MarkTaskAsInReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_MarkTaskAsInReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MarkTaskAsInReview(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MarkTaskAsDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MarkTaskAsDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_MarkTaskAsDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MarkTaskAsDone(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MarkTaskAsCanceled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MarkTaskAsCanceled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_MarkTaskAsCanceled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MarkTaskAsCanceled(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertTask",
			Handler:    _TaskService_UpsertTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _TaskService_ListTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
		{
			MethodName: "MarkTaskAsInProgress",
			Handler:    _TaskService_MarkTaskAsInProgress_Handler,
		},
		{
			MethodName: "MarkTaskAsInReview",
			Handler:    _TaskService_MarkTaskAsInReview_Handler,
		},
		{
			MethodName: "MarkTaskAsDone",
			Handler:    _TaskService_MarkTaskAsDone_Handler,
		},
		{
			MethodName: "MarkTaskAsCanceled",
			Handler:    _TaskService_MarkTaskAsCanceled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/task_service.proto",
}
