// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: integration/strava_service.proto

package integration

import (
	context "context"
	common "github.com/ngdangkietswe/swe-protobuf-shared/generated/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StravaService_IntegrateStravaAccount_FullMethodName = "/integration.StravaService/IntegrateStravaAccount"
	StravaService_GetStravaAccount_FullMethodName       = "/integration.StravaService/GetStravaAccount"
)

// StravaServiceClient is the client API for StravaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StravaServiceClient interface {
	IntegrateStravaAccount(ctx context.Context, in *IntegrateStravaAccountReq, opts ...grpc.CallOption) (*common.EmptyResp, error)
	GetStravaAccount(ctx context.Context, in *GetStravaAccountReq, opts ...grpc.CallOption) (*GetStravaAccountResp, error)
}

type stravaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStravaServiceClient(cc grpc.ClientConnInterface) StravaServiceClient {
	return &stravaServiceClient{cc}
}

func (c *stravaServiceClient) IntegrateStravaAccount(ctx context.Context, in *IntegrateStravaAccountReq, opts ...grpc.CallOption) (*common.EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.EmptyResp)
	err := c.cc.Invoke(ctx, StravaService_IntegrateStravaAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stravaServiceClient) GetStravaAccount(ctx context.Context, in *GetStravaAccountReq, opts ...grpc.CallOption) (*GetStravaAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStravaAccountResp)
	err := c.cc.Invoke(ctx, StravaService_GetStravaAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StravaServiceServer is the server API for StravaService service.
// All implementations must embed UnimplementedStravaServiceServer
// for forward compatibility.
type StravaServiceServer interface {
	IntegrateStravaAccount(context.Context, *IntegrateStravaAccountReq) (*common.EmptyResp, error)
	GetStravaAccount(context.Context, *GetStravaAccountReq) (*GetStravaAccountResp, error)
	mustEmbedUnimplementedStravaServiceServer()
}

// UnimplementedStravaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStravaServiceServer struct{}

func (UnimplementedStravaServiceServer) IntegrateStravaAccount(context.Context, *IntegrateStravaAccountReq) (*common.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrateStravaAccount not implemented")
}
func (UnimplementedStravaServiceServer) GetStravaAccount(context.Context, *GetStravaAccountReq) (*GetStravaAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStravaAccount not implemented")
}
func (UnimplementedStravaServiceServer) mustEmbedUnimplementedStravaServiceServer() {}
func (UnimplementedStravaServiceServer) testEmbeddedByValue()                       {}

// UnsafeStravaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StravaServiceServer will
// result in compilation errors.
type UnsafeStravaServiceServer interface {
	mustEmbedUnimplementedStravaServiceServer()
}

func RegisterStravaServiceServer(s grpc.ServiceRegistrar, srv StravaServiceServer) {
	// If the following call pancis, it indicates UnimplementedStravaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StravaService_ServiceDesc, srv)
}

func _StravaService_IntegrateStravaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrateStravaAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StravaServiceServer).IntegrateStravaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StravaService_IntegrateStravaAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StravaServiceServer).IntegrateStravaAccount(ctx, req.(*IntegrateStravaAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StravaService_GetStravaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStravaAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StravaServiceServer).GetStravaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StravaService_GetStravaAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StravaServiceServer).GetStravaAccount(ctx, req.(*GetStravaAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StravaService_ServiceDesc is the grpc.ServiceDesc for StravaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StravaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration.StravaService",
	HandlerType: (*StravaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntegrateStravaAccount",
			Handler:    _StravaService_IntegrateStravaAccount_Handler,
		},
		{
			MethodName: "GetStravaAccount",
			Handler:    _StravaService_GetStravaAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integration/strava_service.proto",
}
