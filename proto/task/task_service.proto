syntax = "proto3";
package task;

option go_package = "proto/task";

option java_multiple_files = true;
option java_package = "dev.ngdangkietswe.sweprotobufshared.task.service";
option java_outer_classname = "TaskServiceAPI";

import "google/api/annotations.proto";
import "common/shared.proto";
import "task/shared.proto";

service TaskService {
  rpc UpsertTask (UpsertTaskReq) returns (common.UpsertResp) {
    option (google.api.http) = {
      post: "/api/v1/tasks"
      body: "*"
    };
  }
  rpc ListTask (ListTaskReq) returns (ListTaskResp) {
    option (google.api.http) = {
      get: "/api/v1/tasks"
    };
  }
  rpc GetTask (common.IdReq) returns (GetTaskResp) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{id}"
    };
  }
  rpc DeleteTask (common.IdReq) returns (common.EmptyResp) {
    option (google.api.http) = {
      delete: "/api/v1/tasks/{id}"
    };
  }
  rpc MarkTaskAsInProgress (common.IdReq) returns (common.EmptyResp) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{id}/in-progress"
    };
  }
  rpc MarkTaskAsInReview (common.IdReq) returns (common.EmptyResp) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{id}/in-review"
    };
  }
  rpc MarkTaskAsDone (common.IdReq) returns (common.EmptyResp) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{id}/done"
    };
  }
  rpc MarkTaskAsCanceled (common.IdReq) returns (common.EmptyResp) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{id}/canceled"
    };
  }
}

message GetTaskResp {
  bool success = 1;
  oneof resp {
    Task task = 2;
    common.Error error = 3;
  }
}

message UpsertTaskReq {
  optional string id = 1;
  string title = 2;
  string description = 3;
  Status status = 4;
  optional string reporter_id = 5;
  optional string assignee_id = 6;
}

message ListTaskReq {
  optional string created_by_id = 1;
  optional string reporter_id = 2;
  optional string assignee_id = 3;
  optional Status status = 4;
  common.Pageable pageable = 5;
  optional string search = 6;
}

message ListTaskResp {
  message Data {
    repeated Task tasks = 1;
    common.PageMetaData page_meta_data = 2;
  }
  bool success = 1;
  oneof resp {
    Data data = 2;
    common.Error error = 3;
  }
}